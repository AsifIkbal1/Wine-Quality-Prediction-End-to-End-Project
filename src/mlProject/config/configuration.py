from mlProject.constants import *
from mlProject.utils.common import read_yaml, create_directories
from mlProject.entity.config_entity import (DataIngestionConfig, DataValidationConfig, DataTransformationConfig, ModelTrainerConfig, ModelEvaluationConfig)


class ConfigurationManager:
    def __init__(
        self,
        config_filepath = CONFIG_FILE_PATH,
        params_filepath = PARAMS_FILE_PATH,
        schema_filepath = SCHEMA_FILE_PATH):

        # ЁЯУЦ YAML ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи, ржкрзНржпрж╛рж░рж╛ржо ржПржмржВ рж╕рзНржХрж┐ржорж╛ ржкрзЬрж╛ рж╣ржЪрзНржЫрзЗ
        self.config = read_yaml(config_filepath)
        self.params = read_yaml(params_filepath)
        self.schema = read_yaml(schema_filepath)

        # ЁЯУБ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗрж░ ржЬржирзНржп ржорзВрж▓ artifacts ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐
        create_directories([self.config.artifacts_root])


    def get_data_ingestion_config(self) -> DataIngestionConfig:
        # ЁЯз╛ data_ingestion ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ржЕржВрж╢ржЯрж╛ ржмрзЗрж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        config = self.config.data_ingestion

        # ЁЯУВ data_ingestion ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐
        create_directories([config.root_dir])

        # тЪЩя╕П DataIngestionConfig ржХрзНрж▓рж╛рж╕рзЗрж░ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐
        data_ingestion_config = DataIngestionConfig(
            root_dir=config.root_dir,
            source_URL=config.source_URL,
            local_data_file=config.local_data_file,
            unzip_dir=config.unzip_dir
        )

        # тЬЕ ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        return data_ingestion_config


    def get_data_validation_config(self) -> DataValidationConfig:
        config = self.config.data_validation
        schema = self.schema.COLUMNS

        create_directories([config.root_dir])

        data_validation_config = DataValidationConfig(
            root_dir=config.root_dir,
            STATUS_FILE=config.STATUS_FILE,
            unzip_data_dir = config.unzip_data_dir,
            all_schema=schema,
        )

        return data_validation_config
    
    def get_data_transformation_config(self) -> DataTransformationConfig:
        config = self.config.data_transformation

        create_directories([config.root_dir])

        data_transformation_config = DataTransformationConfig(
            root_dir=config.root_dir,
            data_path=config.data_path,
        )

        return data_transformation_config
    

    def get_model_trainer_config(self) -> ModelTrainerConfig:
        config = self.config.model_trainer
        params = self.params.ElasticNet
        schema =  self.schema.TARGET_COLUMN

        create_directories([config.root_dir])

        model_trainer_config = ModelTrainerConfig(
            root_dir=config.root_dir,
            train_data_path = config.train_data_path,
            test_data_path = config.test_data_path,
            model_name = config.model_name,
            alpha = params.alpha,
            l1_ratio = params.l1_ratio,
            target_column = schema.name
            
        )

        return model_trainer_config
    


    def get_model_evaluation_config(self) -> ModelEvaluationConfig:
        # ЁЯФз ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи, ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржПржмржВ ржЯрж╛рж░рзНржЧрзЗржЯ ржХрж▓рж╛ржо рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        config = self.config.model_evaluation
        params = self.params.ElasticNet
        schema = self.schema.TARGET_COLUMN

        # ЁЯУВ ржоржбрзЗрж▓ ржЗржнрзНржпрж╛рж▓рзБрзЯрзЗрж╢ржирзЗрж░ ржЬржирзНржп рж░рзБржЯ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐
        create_directories([config.root_dir])

        # тЬЕ ModelEvaluationConfig ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐
        model_evaluation_config = ModelEvaluationConfig(
            root_dir=config.root_dir,  # ЁЯУБ ржорзВрж▓ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐
            test_data_path=config.test_data_path,  # ЁЯзк ржЯрзЗрж╕рзНржЯ ржбрзЗржЯрж╛рж░ ржкрж╛рже
            model_path=config.model_path,  # ЁЯдЦ ржЯрзНрж░рзЗржЗржиржХрзГржд ржоржбрзЗрж▓ ржлрж╛ржЗрж▓ ржкрж╛рже
            all_params=params,  # тЪЩя╕П ржоржбрзЗрж▓ рж╣рж╛ржЗржкрж╛рж░ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░рж╕
            metric_file_name=config.metric_file_name,  # ЁЯУК ржорзЗржЯрзНрж░рж┐ржХ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржлрж╛ржЗрж▓ ржкрж╛рже
            target_column=schema.name,  # ЁЯОп ржЯрж╛рж░рзНржЧрзЗржЯ ржХрж▓рж╛ржорзЗрж░ ржирж╛ржо
            mlflow_uri="https://dagshub.com/AsifIkbal1/Wine-Quality-Prediction-End-to-End-Project.mlflow",  # ЁЯМР MLflow tracking URI
        )

        return model_evaluation_config  # ЁЯФД ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ