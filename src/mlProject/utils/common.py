# ЁЯУж ржжрж░ржХрж╛рж░рж┐ ржкрзНржпрж╛ржХрзЗржЬ ржЗржоржкрзЛрж░рзНржЯ
import os
from box.exceptions import BoxValueError
import yaml
from mlProject import logger
import json
import joblib
from ensure import ensure_annotations
from box import ConfigBox
from pathlib import Path
from typing import Any

# ЁЯЯб YAML ржлрж╛ржЗрж▓ ржкрзЬрж╛рж░ ржЬржирзНржп ржлрж╛ржВрж╢ржи
@ensure_annotations
def read_yaml(path_to_yaml: Path) -> ConfigBox:
    """
    ЁЯФН YAML ржлрж╛ржЗрж▓ ржкрзЬрзЗ ConfigBox рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ (dictionary ржПрж░ ржорждрзЛ ржХрж┐ржирзНрждрзБ .key ржжрж┐рзЯрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛рзЯ)
    """
    try:
        with open(path_to_yaml) as yaml_file:
            content = yaml.safe_load(yaml_file)
            logger.info(f"yaml file: {path_to_yaml} loaded successfully тЬЕ")
            return ConfigBox(content)
    except BoxValueError:
        raise ValueError("тЪая╕П YAML ржлрж╛ржЗрж▓ ржлрж╛ржБржХрж╛")
    except Exception as e:
        raise e

# ЁЯУБ ржПржХрж╛ржзрж┐ржХ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп
@ensure_annotations
def create_directories(path_to_directories: list, verbose=True):
    """
    ЁЯУВ рж▓рж┐рж╕рзНржЯрзЗ ржжрзЗржУрзЯрж╛ рж╕ржм path ржЕржирзБржпрж╛рзЯрзА ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ ржХрж░рзЗ
    """
    for path in path_to_directories:
        os.makedirs(path, exist_ok=True)
        if verbose:
            logger.info(f"тЬЕ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ рж╣рзЯрзЗржЫрзЗ: {path}")

# ЁЯУД Dictionary ржбрзЗржЯрж╛ JSON ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ
@ensure_annotations
def save_json(path: Path, data: dict):
    """
    ЁЯТ╛ JSON ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ
    """
    with open(path, "w") as f:
        json.dump(data, f, indent=4)
    logger.info(f"тЬЕ JSON ржлрж╛ржЗрж▓ рж╕рзЗржн рж╣рзЯрзЗржЫрзЗ: {path}")

# ЁЯУД JSON ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рзЗ ConfigBox ржЖржХрж╛рж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
@ensure_annotations
def load_json(path: Path) -> ConfigBox:
    """
    ЁЯФД JSON ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рзЗ ржПржмржВ ConfigBox ржЖржХрж╛рж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
    """
    with open(path) as f:
        content = json.load(f)
    logger.info(f"тЬЕ JSON ржлрж╛ржЗрж▓ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ: {path}")
    return ConfigBox(content)

# ЁЯТ╛ ржпрзЗржХрзЛржирзЛ ржЕржмржЬрзЗржХрзНржЯ ржмрж╛ржЗржирж╛рж░рж┐ ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржн ржХрж░рзЗ (joblib)
@ensure_annotations
def save_bin(data: Any, path: Path):
    """
    ЁЯУж ржмрж╛ржЗржирж╛рж░рж┐ (Binary) ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг
    """
    joblib.dump(value=data, filename=path)
    logger.info(f"тЬЕ ржмрж╛ржЗржирж╛рж░рж┐ ржлрж╛ржЗрж▓ рж╕рзЗржн рж╣рзЯрзЗржЫрзЗ: {path}")

# ЁЯФД ржмрж╛ржЗржирж╛рж░рж┐ ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рзЗ ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
@ensure_annotations
def load_bin(path: Path) -> Any:
    """
    ЁЯУд ржмрж╛ржЗржирж╛рж░рж┐ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржЕржмржЬрзЗржХрзНржЯ рж▓рзЛржб ржХрж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
    """
    data = joblib.load(path)
    logger.info(f"тЬЕ ржмрж╛ржЗржирж╛рж░рж┐ ржлрж╛ржЗрж▓ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ: {path}")
    return data

# ЁЯУП ржлрж╛ржЗрж▓рзЗрж░ рж╕рж╛ржЗржЬ ржХрж┐рж▓рзЛржмрж╛ржЗржЯрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
@ensure_annotations
def get_size(path: Path) -> str:
    """
    ЁЯФН ржлрж╛ржЗрж▓рзЗрж░ рж╕рж╛ржЗржЬ (KB) ржмрзЗрж░ ржХрж░рзЗ ржжрзЗрзЯ
    """
    size_in_kb = round(os.path.getsize(path)/1024)
    return f"~ {size_in_kb} KB"








 

'''
@ensure_annotations рж╣рж▓ ржПржХржЯрж┐ Python ржбрзЗржХрзЛрж░рзЗржЯрж░ (decorator) ржпрзЗржЯрж╛ ensure рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржерзЗржХрзЗ ржЖрж╕рзЗ ржПржмржВ ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ function-ржПрж░ type annotations enforce ржХрж░рж╛рж░ ржЬржирзНржп тЬЕ

ЁЯФН ржХрж╛ржЬ ржХрзА ржХрж░рзЗ?
ржпржЦржи рждрзБржорж┐ @ensure_annotations ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ ржХрзЛржирзЛ ржлрж╛ржВрж╢ржирзЗрж░ ржЙржкрж░, рждржЦржи рж╕рзЗржЯрж╛ function call-ржПрж░ рж╕ржорзЯ рж╕ржм parameter ржЖрж░ return value-ржПрж░ type annotations ржорж┐рж▓рж┐рзЯрзЗ ржжрзЗржЦрзЗред ржпржжрж┐ mismatch рж╣рзЯ, рждрж╛рж╣рж▓рзЗ RuntimeError ржмрж╛ TypeError ржжрзЗрзЯред

ЁЯУж Installation:
bash
Copy
Edit
pip install ensure
тЬЕ ржЙржжрж╛рж╣рж░ржг:
python
Copy
Edit
from ensure import ensure_annotations

@ensure_annotations
def add(x: int, y: int) -> int:
    return x + y

print(add(5, 10))        # тЬЕ ржарж┐ржХ ржЖржЫрзЗ
print(add(5, "hello"))   # тЭМ TypeError: Argument y must be <class 'int'>
ЁЯФР ржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржм?
ЁЯФ╕ Type hint рж╢рзБржзрзБ documentation ржирзЯ, @ensure_annotations ржжрж┐рзЯрзЗ runtime-ржП enforce ржХрж░рж╛ржУ ржпрж╛рзЯ
ЁЯФ╕ ржнрзБрж▓ type ржжрж┐рж▓рзЗ bug detect ржХрж░рж╛ рж╕рж╣ржЬ рж╣рзЯ
ЁЯФ╕ Clean, safe, and predictable codebase рждрзИрж░рж┐ рж╣рзЯ

тЪая╕П рж╕рзАржорж╛ржмржжрзНржзрждрж╛:
Performance-sensitive ржЬрж╛рзЯржЧрж╛рзЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржПржХржЯрзБ slowdown рж╣рждрзЗ ржкрж╛рж░рзЗ

Advanced type hints (Union, Optional, custom classes) рж╕ржмрж╕ржорзЯ ржарж┐ржХржарж╛ржХ detect ржирж╛ржУ ржХрж░рждрзЗ ржкрж╛рж░рзЗ



'''